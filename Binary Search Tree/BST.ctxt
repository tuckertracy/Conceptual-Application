#BlueJ class context
comment0.target=BST
comment0.text=\n\ \ The\ {@code\ BST}\ class\ represents\ an\ ordered\ symbol\ table\ of\ generic\n\ \ key-value\ pairs.\n\ \ It\ supports\ the\ usual\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\n\ \ <em>delete</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\n\ \ It\ also\ provides\ a\ <em>keys</em>\ method\ for\ iterating\ over\ all\ of\ the\ keys.\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\n\ \ values\ cannot\ be\ {@code\ null}\u2014setting\ the\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\n\ \ from\ the\ symbol\ table.\n\ \ <p>\n\ \ This\ implementation\ uses\ an\ (unbalanced)\ binary\ search\ tree.\ It\ requires\ that\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\n\ \ The\ <em>put</em>,\ <em>contains</em>,\ <em>remove</em>,\ <em>minimum</em>,\n\ \ <em>maximum</em>,\ <em>ceiling</em>,\ <em>floor</em>,\ <em>select</em>,\ and\n\ \ <em>rank</em>\ \ operations\ each\ take\n\ \ linear\ time\ in\ the\ worst\ case,\ if\ the\ tree\ becomes\ unbalanced.\n\ \ The\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\ constant\ time.\n\ \ Construction\ takes\ constant\ time.\n\ \ <p>\n\ \ For\ additional\ documentation,\ see\ Section\ 3.2\ of\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\n\n\ \ @author\ Robert\ Sedgewick\n\ \ @author\ Kevin\ Wayne\n\ \ \n\ \ Adapted\ and\ modified\ for\ CSC225\ by\ Nadeem\ Abdul\ Hamid\n
comment1.params=
comment1.target=BST()
comment1.text=\n\ Initializes\ an\ empty\ symbol\ table.\n
comment10.params=key
comment10.target=void\ delete(java.lang.Comparable)
comment10.text=\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \n\n\ @param\ \ key\ the\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment11.params=x\ key
comment11.target=BST.Node\ delete(BST.Node,\ java.lang.Comparable)
comment12.params=
comment12.target=void\ deleteMin()
comment12.text=\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment13.params=x
comment13.target=BST.Node\ deleteMin(BST.Node)
comment14.params=
comment14.target=void\ deleteMax()
comment14.text=\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment15.params=x
comment15.target=BST.Node\ deleteMax(BST.Node)
comment16.params=
comment16.target=java.lang.Comparable\ min()
comment16.text=\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\n\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment17.params=x
comment17.target=BST.Node\ min(BST.Node)
comment18.params=
comment18.target=java.lang.Comparable\ max()
comment18.text=\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\n\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment19.params=x
comment19.target=BST.Node\ max(BST.Node)
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\ {@code\ false}\ otherwise\n
comment20.params=
comment20.target=java.lang.Iterable\ keys()
comment20.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\n\n\ @return\ all\ keys\ in\ the\ symbol\ table\n
comment21.params=lo\ hi
comment21.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment21.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\n\ as\ an\ {@code\ Iterable}.\n\n\ @param\ \ lo\ minimum\ endpoint\n\ @param\ \ hi\ maximum\ endpoint\n\ @return\ all\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\ \n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\n
comment22.params=x\ queue\ lo\ hi
comment22.target=void\ keys(BST.Node,\ java.util.Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment23.params=
comment23.target=int\ height()
comment23.text=\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\n\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\n
comment24.params=x
comment24.target=int\ height(BST.Node)
comment25.params=
comment25.target=java.lang.Iterable\ levelOrder()
comment25.text=\n\ Returns\ the\ keys\ in\ the\ BST\ in\ level\ order\ (for\ debugging).\n\n\ @return\ the\ keys\ in\ the\ BST\ in\ level\ order\ traversal\n
comment26.params=
comment26.target=java.util.Iterator\ iterator()
comment27.params=k1\ k2
comment27.target=java.lang.Comparable\ lowestCommonAncestor(java.lang.Comparable,\ java.lang.Comparable)
comment28.params=cur\ k1\ k2
comment28.target=java.lang.Comparable\ lowestCommonAncestor(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment29.params=args
comment29.target=void\ main(java.lang.String[])
comment29.text=\n\ Unit\ tests\ the\ {@code\ BST}\ data\ type.\n\n\ @param\ args\ the\ command-line\ arguments\n
comment3.params=
comment3.target=int\ size()
comment3.text=\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\n
comment4.params=x
comment4.target=int\ size(BST.Node)
comment5.params=key
comment5.target=boolean\ contains(java.lang.Comparable)
comment5.text=\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\n\n\ @param\ \ key\ the\ key\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment6.params=key
comment6.target=java.lang.Object\ get(java.lang.Comparable)
comment6.text=\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\n\n\ @param\ \ key\ the\ key\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment7.params=x\ key
comment7.target=java.lang.Object\ get(BST.Node,\ java.lang.Comparable)
comment8.params=key\ val
comment8.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment8.text=\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\n\ if\ the\ specified\ value\ is\ {@code\ null}.\n\n\ @param\ \ key\ the\ key\n\ @param\ \ val\ the\ value\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment9.params=x\ key\ val
comment9.target=BST.Node\ put(BST.Node,\ java.lang.Comparable,\ java.lang.Object)
numComments=30
